
package tutorial9bclient;

import tutorial9bclient.*;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-1b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "RealService", targetNamespace = "http://server/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface RealService {


    /**
     * 
     * @param d
     * @param d0
     * @return
     *     returns java.lang.Double
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addTwoNumbersWithException", targetNamespace = "http://server/", className = "tutorial9bclient.AddTwoNumbersWithException")
    @ResponseWrapper(localName = "addTwoNumbersWithExceptionResponse", targetNamespace = "http://server/", className = "tutorial9bclient.AddTwoNumbersWithExceptionResponse")
    @Action(input = "http://server/RealService/addTwoNumbersWithExceptionRequest", output = "http://server/RealService/addTwoNumbersWithExceptionResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://server/RealService/addTwoNumbersWithException/Fault/Exception")
    })
    public Double addTwoNumbersWithException(
        @WebParam(name = "d", targetNamespace = "")
        Double d,
        @WebParam(name = "d0", targetNamespace = "")
        Double d0)
        throws Exception_Exception
    ;

    /**
     * 
     * @param d
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addNumber", targetNamespace = "http://server/", className = "tutorial9bclient.AddNumber")
    @ResponseWrapper(localName = "addNumberResponse", targetNamespace = "http://server/", className = "tutorial9bclient.AddNumberResponse")
    @Action(input = "http://server/RealService/addNumberRequest", output = "http://server/RealService/addNumberResponse")
    public String addNumber(
        @WebParam(name = "d", targetNamespace = "")
        Double d);

    /**
     * 
     * @param name
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "hello", targetNamespace = "http://server/", className = "tutorial9bclient.Hello")
    @ResponseWrapper(localName = "helloResponse", targetNamespace = "http://server/", className = "tutorial9bclient.HelloResponse")
    @Action(input = "http://server/RealService/helloRequest", output = "http://server/RealService/helloResponse")
    public String hello(
        @WebParam(name = "name", targetNamespace = "")
        String name);

    /**
     * 
     * @param d
     * @param d0
     * @return
     *     returns java.lang.Double
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addTwoNumbers", targetNamespace = "http://server/", className = "tutorial9bclient.AddTwoNumbers")
    @ResponseWrapper(localName = "addTwoNumbersResponse", targetNamespace = "http://server/", className = "tutorial9bclient.AddTwoNumbersResponse")
    @Action(input = "http://server/RealService/addTwoNumbersRequest", output = "http://server/RealService/addTwoNumbersResponse")
    public Double addTwoNumbers(
        @WebParam(name = "d", targetNamespace = "")
        double d,
        @WebParam(name = "d0", targetNamespace = "")
        double d0);

    /**
     * 
     * @param myPoint3D
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addMyPoint3D", targetNamespace = "http://server/", className = "tutorial9bclient.AddMyPoint3D")
    @ResponseWrapper(localName = "addMyPoint3DResponse", targetNamespace = "http://server/", className = "tutorial9bclient.AddMyPoint3DResponse")
    @Action(input = "http://server/RealService/addMyPoint3DRequest", output = "http://server/RealService/addMyPoint3DResponse")
    public String addMyPoint3D(
        @WebParam(name = "myPoint3D", targetNamespace = "")
        MyPoint3D myPoint3D);

    /**
     * 
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "isConnected", targetNamespace = "http://server/", className = "tutorial9bclient.IsConnected")
    @ResponseWrapper(localName = "isConnectedResponse", targetNamespace = "http://server/", className = "tutorial9bclient.IsConnectedResponse")
    @Action(input = "http://server/RealService/isConnectedRequest", output = "http://server/RealService/isConnectedResponse")
    public String isConnected();

    /**
     * 
     * @return
     *     returns java.lang.Double
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "averageOfAllNumbers", targetNamespace = "http://server/", className = "tutorial9bclient.AverageOfAllNumbers")
    @ResponseWrapper(localName = "averageOfAllNumbersResponse", targetNamespace = "http://server/", className = "tutorial9bclient.AverageOfAllNumbersResponse")
    @Action(input = "http://server/RealService/averageOfAllNumbersRequest", output = "http://server/RealService/averageOfAllNumbersResponse")
    public Double averageOfAllNumbers();

    /**
     * 
     * @param firstString
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addString", targetNamespace = "http://server/", className = "tutorial9bclient.AddString")
    @ResponseWrapper(localName = "addStringResponse", targetNamespace = "http://server/", className = "tutorial9bclient.AddStringResponse")
    @Action(input = "http://server/RealService/addStringRequest", output = "http://server/RealService/addStringResponse")
    public String addString(
        @WebParam(name = "first_String", targetNamespace = "")
        String firstString);

    /**
     * 
     * @return
     *     returns tutorial9bclient.MyPoint3D
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findPointWithHighestZ", targetNamespace = "http://server/", className = "tutorial9bclient.FindPointWithHighestZ")
    @ResponseWrapper(localName = "findPointWithHighestZResponse", targetNamespace = "http://server/", className = "tutorial9bclient.FindPointWithHighestZResponse")
    @Action(input = "http://server/RealService/findPointWithHighestZRequest", output = "http://server/RealService/findPointWithHighestZResponse")
    public MyPoint3D findPointWithHighestZ();

    /**
     * 
     * @param a
     * @param b
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findShortestBetween", targetNamespace = "http://server/", className = "tutorial9bclient.FindShortestBetween")
    @ResponseWrapper(localName = "findShortestBetweenResponse", targetNamespace = "http://server/", className = "tutorial9bclient.FindShortestBetweenResponse")
    @Action(input = "http://server/RealService/findShortestBetweenRequest", output = "http://server/RealService/findShortestBetweenResponse")
    public String findShortestBetween(
        @WebParam(name = "a", targetNamespace = "")
        String a,
        @WebParam(name = "b", targetNamespace = "")
        String b);

    /**
     * 
     * @param a
     * @param b
     * @return
     *     returns java.lang.String
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findShortestBetweenWithException", targetNamespace = "http://server/", className = "tutorial9bclient.FindShortestBetweenWithException")
    @ResponseWrapper(localName = "findShortestBetweenWithExceptionResponse", targetNamespace = "http://server/", className = "tutorial9bclient.FindShortestBetweenWithExceptionResponse")
    @Action(input = "http://server/RealService/findShortestBetweenWithExceptionRequest", output = "http://server/RealService/findShortestBetweenWithExceptionResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://server/RealService/findShortestBetweenWithException/Fault/Exception")
    })
    public String findShortestBetweenWithException(
        @WebParam(name = "a", targetNamespace = "")
        String a,
        @WebParam(name = "b", targetNamespace = "")
        String b)
        throws Exception_Exception
    ;

    /**
     * 
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findShortestAmongAllStrings", targetNamespace = "http://server/", className = "tutorial9bclient.FindShortestAmongAllStrings")
    @ResponseWrapper(localName = "findShortestAmongAllStringsResponse", targetNamespace = "http://server/", className = "tutorial9bclient.FindShortestAmongAllStringsResponse")
    @Action(input = "http://server/RealService/findShortestAmongAllStringsRequest", output = "http://server/RealService/findShortestAmongAllStringsResponse")
    public String findShortestAmongAllStrings();

}
